{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport { Bell, BellOff, BookOpen, AlertTriangle } from 'react-feather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './NotifyMe.scss';\n\nconst NotifyMe = props => {\n  moment.locale(navigator.languages[0].toLowerCase()); // State variabls\n\n  const [showCount, setShowCount] = useState(false);\n  const [messageCount, setMessageCount] = useState(0);\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const [raedIndex, setReadIndex] = useState(0); // Useref for the overlay\n\n  const ref = useRef(null); // Props passed to the component\n\n  const data = props.data;\n  const storageKey = props.storageKey || 'notification_timeline_storage_id';\n  const key = props.notific_key;\n  const notificationMsg = props.notific_value;\n  const sortedByKey = props.sortedByKey;\n  const heading = props.heading || 'Notifications';\n  const bellSize = props.size || 32;\n  const bellColor = props.color || '#FFFFFF';\n  const multiLineSplitter = props.multiLineSplitter || '\\n';\n  const showDate = props.showDate || false;\n  useEffect(() => {\n    if (!sortedByKey) {\n      data.sort((a, b) => b[key] - a[key]);\n    } // We read if any last read item id is in the local storage\n\n\n    let readItemLs = reactLocalStorage.getObject(storageKey);\n    let readMsgId = Object.keys(readItemLs).length > 0 ? readItemLs['id'] : ''; // if the id found, we check what is the index of that message in the array and query it. If not found,\n    // nothing has been read. Hence count should be same as all the message count.\n\n    let readIndex = readMsgId === '' ? data.length : data.findIndex(elem => elem[key] === readMsgId); // if the id is not found, it all flushed out and start again\n\n    readIndex === -1 ? readIndex = data.length : readIndex;\n    setReadIndex(readIndex); // If there are messages and readIndex is pointing to at least one message, we will show the count bubble.\n\n    (data.length && readIndex) > 0 ? setShowCount(true) : setShowCount(false);\n    setMessageCount(readIndex);\n  }, [data]); // Handle the click on the notification bell\n\n  const handleClick = event => {\n    setShow(!show);\n    setTarget(event.target);\n  }; // Calculate the day diff\n\n\n  const getDayDiff = timestamp => {\n    let a = moment();\n    let b = moment(timestamp);\n    let diff = a.diff(b, 'year');\n\n    if (diff === 0) {\n      diff = a.diff(b, 'month');\n\n      if (diff === 0) {\n        diff = a.diff(b, 'days');\n\n        if (diff === 0) {\n          diff = a.diff(b, 'hour');\n\n          if (diff === 0) {\n            diff = a.diff(b, 'minute');\n\n            if (diff === 0) {\n              diff = a.diff(b, 'second');\n              return `${diff} second(s) before`;\n            } else {\n              return `${diff} minute(s) before`;\n            }\n          } else {\n            return `${diff} hour(s) before`;\n          }\n        } else {\n          return `${diff} days(s) before`;\n        }\n      } else {\n        return `${diff} month(s) before`;\n      }\n    } else {\n      return `${diff} year(s) before`;\n    }\n  };\n\n  const getWhen = timestamp => {\n    let when = `${moment(timestamp).format('L')} ${moment(timestamp).format('LTS')}`;\n    return when;\n  }; // Get the notification message\n\n\n  const getContent = message => {\n    if (message.indexOf(multiLineSplitter) >= 0) {\n      let splitted = message.split(multiLineSplitter);\n      let ret = '<ul>';\n\n      for (let i = 0; i <= splitted.length - 1; i++) {\n        if (splitted[i] !== '') {\n          ret = ret + '<li>' + splitted[i] + '</li>';\n        }\n      }\n\n      ret = ret + '</ul>';\n      return {\n        __html: ret\n      };\n    }\n\n    return {\n      __html: `<ul><li>${message}</li></ul>`\n    };\n  }; // Hide the notification on clicking outside\n\n\n  const hide = () => {\n    setShow(false);\n  }; // Call the function when mark as read link is clicked\n\n\n  const markAsRead = () => {\n    setShowCount(false);\n    reactLocalStorage.setObject(storageKey, {\n      'id': data[0][key]\n    });\n    setReadIndex(0);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notification-container\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showCount ? 'notification notify show-count' : 'notification notify',\n    \"data-count\": messageCount,\n    onClick: event => handleClick(event)\n  }, /*#__PURE__*/React.createElement(Bell, {\n    color: bellColor,\n    size: bellSize\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Overlay, {\n    show: show,\n    target: target,\n    placement: \"bottom\",\n    container: ref.current,\n    containerPadding: 20,\n    rootClose: true,\n    onHide: hide\n  }, /*#__PURE__*/React.createElement(Popover, {\n    id: \"popover-contained\"\n  }, /*#__PURE__*/React.createElement(Popover.Title, {\n    as: \"h3\"\n  }, heading), /*#__PURE__*/React.createElement(Popover.Content, {\n    style: {\n      padding: '3px 3px'\n    }\n  }, showCount && /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n    variant: \"link\",\n    onClick: props.markAsReadFn || markAsRead\n  }, /*#__PURE__*/React.createElement(BookOpen, {\n    size: 24\n  }), \"Mark all as read\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"notification-info-panel\"\n  }, data.length > 0 ? data.map((message, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: index < raedIndex ? 'notification-message unread' : 'notification-message',\n    key: index\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timestamp\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, getDayDiff(message[key])), showDate && /*#__PURE__*/React.createElement(\"span\", null, ' (', getWhen(message[key]), ')')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    dangerouslySetInnerHTML: getContent(message[notificationMsg])\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertTriangle, {\n    color: \"#000000\",\n    size: 32\n  }), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"nodata\"\n  }, \"No Notifications found!\"))))))));\n};\n\nNotifyMe.prototype = {\n  storageKey: PropTypes.string,\n  notific_key: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  notific_value: PropTypes.string.isRequired,\n  sortedByKey: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.string,\n  heading: PropTypes.string,\n  multiLineSplitter: PropTypes.string,\n  showDate: PropTypes.bool,\n  markAsReadFn: PropTypes.func\n};\nexport default NotifyMe;","map":{"version":3,"sources":["D:/monkeyfruad/frontend/node_modules/react-notification-timeline/index.js"],"names":["React","useState","useEffect","useRef","PropTypes","Overlay","Popover","Button","moment","reactLocalStorage","Bell","BellOff","BookOpen","AlertTriangle","NotifyMe","props","locale","navigator","languages","toLowerCase","showCount","setShowCount","messageCount","setMessageCount","show","setShow","target","setTarget","raedIndex","setReadIndex","ref","data","storageKey","key","notific_key","notificationMsg","notific_value","sortedByKey","heading","bellSize","size","bellColor","color","multiLineSplitter","showDate","sort","a","b","readItemLs","getObject","readMsgId","Object","keys","length","readIndex","findIndex","elem","handleClick","event","getDayDiff","timestamp","diff","getWhen","when","format","getContent","message","indexOf","splitted","split","ret","i","__html","hide","markAsRead","setObject","createElement","Fragment","className","onClick","placement","container","current","containerPadding","rootClose","onHide","id","Title","as","Content","style","padding","variant","markAsReadFn","map","index","dangerouslySetInnerHTML","prototype","string","isRequired","array","bool","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport { Bell, BellOff, BookOpen, AlertTriangle } from 'react-feather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './NotifyMe.scss';\n\nconst NotifyMe = props => {\n  moment.locale(navigator.languages[0].toLowerCase()); // State variabls\n\n  const [showCount, setShowCount] = useState(false);\n  const [messageCount, setMessageCount] = useState(0);\n  const [show, setShow] = useState(false);\n  const [target, setTarget] = useState(null);\n  const [raedIndex, setReadIndex] = useState(0); // Useref for the overlay\n\n  const ref = useRef(null); // Props passed to the component\n\n  const data = props.data;\n  const storageKey = props.storageKey || 'notification_timeline_storage_id';\n  const key = props.notific_key;\n  const notificationMsg = props.notific_value;\n  const sortedByKey = props.sortedByKey;\n  const heading = props.heading || 'Notifications';\n  const bellSize = props.size || 32;\n  const bellColor = props.color || '#FFFFFF';\n  const multiLineSplitter = props.multiLineSplitter || '\\n';\n  const showDate = props.showDate || false;\n  useEffect(() => {\n    if (!sortedByKey) {\n      data.sort((a, b) => b[key] - a[key]);\n    } // We read if any last read item id is in the local storage\n\n\n    let readItemLs = reactLocalStorage.getObject(storageKey);\n    let readMsgId = Object.keys(readItemLs).length > 0 ? readItemLs['id'] : ''; // if the id found, we check what is the index of that message in the array and query it. If not found,\n    // nothing has been read. Hence count should be same as all the message count.\n\n    let readIndex = readMsgId === '' ? data.length : data.findIndex(elem => elem[key] === readMsgId); // if the id is not found, it all flushed out and start again\n\n    readIndex === -1 ? readIndex = data.length : readIndex;\n    setReadIndex(readIndex); // If there are messages and readIndex is pointing to at least one message, we will show the count bubble.\n\n    (data.length && readIndex) > 0 ? setShowCount(true) : setShowCount(false);\n    setMessageCount(readIndex);\n  }, [data]); // Handle the click on the notification bell\n\n  const handleClick = event => {\n    setShow(!show);\n    setTarget(event.target);\n  }; // Calculate the day diff\n\n\n  const getDayDiff = timestamp => {\n    let a = moment();\n    let b = moment(timestamp);\n    let diff = a.diff(b, 'year');\n\n    if (diff === 0) {\n      diff = a.diff(b, 'month');\n\n      if (diff === 0) {\n        diff = a.diff(b, 'days');\n\n        if (diff === 0) {\n          diff = a.diff(b, 'hour');\n\n          if (diff === 0) {\n            diff = a.diff(b, 'minute');\n\n            if (diff === 0) {\n              diff = a.diff(b, 'second');\n              return `${diff} second(s) before`;\n            } else {\n              return `${diff} minute(s) before`;\n            }\n          } else {\n            return `${diff} hour(s) before`;\n          }\n        } else {\n          return `${diff} days(s) before`;\n        }\n      } else {\n        return `${diff} month(s) before`;\n      }\n    } else {\n      return `${diff} year(s) before`;\n    }\n  };\n\n  const getWhen = timestamp => {\n    let when = `${moment(timestamp).format('L')} ${moment(timestamp).format('LTS')}`;\n    return when;\n  }; // Get the notification message\n\n\n  const getContent = message => {\n    if (message.indexOf(multiLineSplitter) >= 0) {\n      let splitted = message.split(multiLineSplitter);\n      let ret = '<ul>';\n\n      for (let i = 0; i <= splitted.length - 1; i++) {\n        if (splitted[i] !== '') {\n          ret = ret + '<li>' + splitted[i] + '</li>';\n        }\n      }\n\n      ret = ret + '</ul>';\n      return {\n        __html: ret\n      };\n    }\n\n    return {\n      __html: `<ul><li>${message}</li></ul>`\n    };\n  }; // Hide the notification on clicking outside\n\n\n  const hide = () => {\n    setShow(false);\n  }; // Call the function when mark as read link is clicked\n\n\n  const markAsRead = () => {\n    setShowCount(false);\n    reactLocalStorage.setObject(storageKey, {\n      'id': data[0][key]\n    });\n    setReadIndex(0);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notification-container\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: showCount ? 'notification notify show-count' : 'notification notify',\n    \"data-count\": messageCount,\n    onClick: event => handleClick(event)\n  }, /*#__PURE__*/React.createElement(Bell, {\n    color: bellColor,\n    size: bellSize\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Overlay, {\n    show: show,\n    target: target,\n    placement: \"bottom\",\n    container: ref.current,\n    containerPadding: 20,\n    rootClose: true,\n    onHide: hide\n  }, /*#__PURE__*/React.createElement(Popover, {\n    id: \"popover-contained\"\n  }, /*#__PURE__*/React.createElement(Popover.Title, {\n    as: \"h3\"\n  }, heading), /*#__PURE__*/React.createElement(Popover.Content, {\n    style: {\n      padding: '3px 3px'\n    }\n  }, showCount && /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n    variant: \"link\",\n    onClick: props.markAsReadFn || markAsRead\n  }, /*#__PURE__*/React.createElement(BookOpen, {\n    size: 24\n  }), \"Mark all as read\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"notification-info-panel\"\n  }, data.length > 0 ? data.map((message, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: index < raedIndex ? 'notification-message unread' : 'notification-message',\n    key: index\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timestamp\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, getDayDiff(message[key])), showDate && /*#__PURE__*/React.createElement(\"span\", null, ' (', getWhen(message[key]), ')')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    dangerouslySetInnerHTML: getContent(message[notificationMsg])\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertTriangle, {\n    color: \"#000000\",\n    size: 32\n  }), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"nodata\"\n  }, \"No Notifications found!\"))))))));\n};\n\nNotifyMe.prototype = {\n  storageKey: PropTypes.string,\n  notific_key: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  notific_value: PropTypes.string.isRequired,\n  sortedByKey: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.string,\n  heading: PropTypes.string,\n  multiLineSplitter: PropTypes.string,\n  showDate: PropTypes.bool,\n  markAsReadFn: PropTypes.func\n};\nexport default NotifyMe;"]},"metadata":{},"sourceType":"module"}